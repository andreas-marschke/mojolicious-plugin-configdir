package Mojolicious::Plugin::ConfigDir;
use Mojo::Base 'Mojolicious::Plugin';

use File::Basename 'basename';
use File::Spec::Functions 'file_name_is_absolute';
use Mojo::Util 'decamelize';
use File::Slurp;
use Data::Dumper;

our $VERSION = '0.001';

sub load {
  my ($self, $dir, $conf, $app) = @_;
  $app->log->debug(qq{Reading config directory "$dir".});

  # Slurp UTF-8 file
  my %content;
  foreach my $file (read_dir("$dir")) {
    if ($file =~ m/.*\.$conf->{ext}$/) {
      open my $handle, "<:encoding(UTF-8)", $dir."/".$file
	or die qq{Couldn't open config file "$file": $!};
      $content{"$file"} = do { local $/; <$handle> };
      $app->log->debug(qq{Reading config file "$dir/$file".});
    }
  }

  # Process
  return $self->parse(\%content, $dir, $conf, $app);
}

sub parse {
  my ($self, $contents, $conf, $app) = @_;
  # Run Perl code
  my $config = {};
  foreach my $file (keys %$contents) {
    my $content = $contents->{$file};
    my $configfile = eval 'package Mojolicious::Plugin::Config::Sandbox;'
      . "no warnings; sub app { \$app }; use Mojo::Base -strict; $content";
    die qq{Couldn't load configuration from file "$file": $@} if !$configfile && $@;
    die qq{Config file "$file" did not return a hash reference.\n}
      unless ref $configfile eq 'HASH';
    foreach (keys %$configfile) {
      $config->{$_} = $configfile->{$_};
    }
  }

  return $config;
}

sub register {
  my ($self, $app, $confs) = @_;

  # Config file
  my @configs;
  foreach my $conf (@$confs) {

    my $dir = $conf->{dir};

    # Mode specific config file
    my $mode = $dir =~ /^(.*)\.([^.]+)$/ ? join('.', $1, $app->mode, $2) : '';

    # Absolute paths
    my $home = $app->home;
    $dir = $home->rel_dir($dir) unless file_name_is_absolute $dir;
    $mode = $home->rel_file($mode) if $mode && !file_name_is_absolute $mode;
    $mode = undef unless $mode && -e $mode;

    # Make sure ext is set
    $conf->{ext} = "conf" if not defined $conf->{ext};

    # Read config file
    my $config = {};
    if (-d $dir) {
      $config = $self->load($dir, $conf, $app);
    }

    # Check for default and mode specific config file
    elsif (!$conf->{default} && !$mode) {
      die qq{Config file "$dir" missing, maybe you need to create it?\n};
    }

    # Merge everything
    $config = {%$config, %{$self->load($mode, $conf, $app)}} if $mode;
    $config = {%{$conf->{default}}, %$config} if $conf->{default};
    push @configs,$config;
  }

  return @configs;
}

1;

=head1 NAME

Mojolicious::Plugin::ConfigDir - Perl-ish configuration plugin for directories

=head1 SYNOPSIS

  # dir1.conf.d/
  #    main.conf
  {
    foo       => "bar",
    music_dir => app->home->rel_dir('music')
  };

  #    extras.conf
  {
   extra => "baz"
  }

  # Mojolicious
  # has to have a Directory given
  my ($dir1,$dir2) = $self->plugin('ConfigDir' => [{ dir => "dir1.conf.d" },{dir => "dir2.conf.d"} ]);

  # Mojolicious::Lite
  my @config = plugin 'Config' => [{ dir => "dir1.conf.d" },{dir => "dir2.conf.d"} ];

  # Everything can be customized with options
  my $config = plugin Config => { dir => '/etc/myapp.stuff.d/' , ext => "cnf" };

=head1 DESCRIPTION

L<Mojolicious::Plugin::ConfigDir> is a Perl-ish configuration plugin.

The application object can be accessed via C<$app> or the C<app> function,
L<strict>, L<warnings> and Perl 5.10 features are automatically enabled. You
can extend the normal configuration C<myapp.conf.d> with C<mode> specific
ones like C<myapp.$mode.conf.d>. A default configuration directoryname will be
generated by decamelizing the application class with
L<Mojo::Util/"decamelize"> or from the application filename.

The code of this plugin is a good example for learning to build new plugins,
you're welcome to fork it.

=head1 OPTIONS

L<Mojolicious::Plugin::ConfigDir> supports the following options.

=head2 C<default>

  # Mojolicious::Lite
  plugin ConfigDir => {default => {foo => 'bar'}};

Default configuration, making configuration files optional.

=head2 C<ext>

  # Mojolicious::Lite
  plugin ConfigDir => {ext => 'stuff'};

File extension for generated configuration filenames, defaults to C<conf>.

=head2 C<file>

  # Mojolicious::Lite
  plugin ConfigDir => {dir => 'myapp.conf.d/'};
  plugin ConfigDir => {dir => '/etc/foo.stuff.d/'};

Full path to configuration file, defaults to the value of the C<MOJO_CONFIG>
environment variable or C<myapp.conf> in the application home directory.

=head1 METHODS

L<Mojolicious::Plugin::ConfigDir> inherits all methods from
L<Mojolicious::Plugin> and implements the following new ones.

=head2 C<load>

  $plugin->load($dir, $conf, $app);

Loads configuration file and passes the content to C<parse>.

  sub load {
    my ($self, $dir, $conf, $app) = @_;
    ...
    return $self->parse($content, $file, $conf, $app);
  }

=head2 C<parse>

  $plugin->parse($contents, $conf, $app);

Parse configuration file.

  sub parse {
    my ($self, $content, $file, $conf, $app) = @_;
    ...
    return $hash;
  }

=head2 C<register>

  my $config = $plugin->register(Mojolicious->new);
  my $config = $plugin->register(Mojolicious->new, {dir => '/etc/app.conf.d/'});

Register plugin in L<Mojolicious> application.

=head1 SEE ALSO

L<Mojolicious>, L<Mojolicious::Guides>, L<http://mojolicio.us>.

=cut

